type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Collection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  slug: String
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type CollectionAggregator {
  count: Int
  totalCount: Int
}

type CollectionConnection {
  values: [Collection]
  groupBy: CollectionGroupBy
  aggregate: CollectionAggregator
}

type CollectionConnectionCreated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionId {
  key: ID
  connection: CollectionConnection
}

type CollectionConnectionPublished_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionSlug {
  key: String
  connection: CollectionConnection
}

type CollectionConnectionTitle {
  key: String
  connection: CollectionConnection
}

type CollectionConnectionUpdated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionGroupBy {
  id: [CollectionConnectionId]
  created_at: [CollectionConnectionCreated_at]
  updated_at: [CollectionConnectionUpdated_at]
  title: [CollectionConnectionTitle]
  slug: [CollectionConnectionSlug]
  published_at: [CollectionConnectionPublished_at]
}

input CollectionInput {
  title: String
  products: [ID]
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type ComponentProductConfiguration {
  id: ID!
  option: [ComponentProductOption]
}

input ComponentProductConfigurationInput {
  option: [ComponentProductOptionInput]
}

type ComponentProductOption {
  id: ID!
  label: String
  variant: [ComponentProductVariant]
}

input ComponentProductOptionInput {
  label: String
  variant: [ComponentProductVariantInput]
}

type ComponentProductQuoteVariant {
  id: ID!
  sku: String
  name: String
  image: UploadFile
  requiresShipping: Boolean
  price: Float
  listPrice: Float
}

input ComponentProductQuoteVariantInput {
  sku: String
  name: String
  image: ID
  requiresShipping: Boolean
  price: Float
  listPrice: Float
}

type ComponentProductVariant {
  id: ID!
  title: String
  price: Float
  swatch_image: UploadFile
}

input ComponentProductVariantInput {
  title: String
  price: Float
  swatch_image: ID
}

type Customer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  first_name: String
  last_name: String
  email: String
  password: String
  published_at: DateTime
  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]
}

type CustomerAggregator {
  count: Int
  totalCount: Int
}

type CustomerConnection {
  values: [Customer]
  groupBy: CustomerGroupBy
  aggregate: CustomerAggregator
}

type CustomerConnectionCreated_at {
  key: DateTime
  connection: CustomerConnection
}

type CustomerConnectionEmail {
  key: String
  connection: CustomerConnection
}

type CustomerConnectionFirst_name {
  key: String
  connection: CustomerConnection
}

type CustomerConnectionId {
  key: ID
  connection: CustomerConnection
}

type CustomerConnectionLast_name {
  key: String
  connection: CustomerConnection
}

type CustomerConnectionPassword {
  key: String
  connection: CustomerConnection
}

type CustomerConnectionPublished_at {
  key: DateTime
  connection: CustomerConnection
}

type CustomerConnectionUpdated_at {
  key: DateTime
  connection: CustomerConnection
}

type CustomerGroupBy {
  id: [CustomerConnectionId]
  created_at: [CustomerConnectionCreated_at]
  updated_at: [CustomerConnectionUpdated_at]
  first_name: [CustomerConnectionFirst_name]
  last_name: [CustomerConnectionLast_name]
  email: [CustomerConnectionEmail]
  password: [CustomerConnectionPassword]
  published_at: [CustomerConnectionPublished_at]
}

input CustomerInput {
  first_name: String
  last_name: String
  email: String
  password: String
  orders: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum ENUM_GLOBAL_CURRENCY {
  USD
  VND
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

type Global {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Currency: ENUM_GLOBAL_CURRENCY
  published_at: DateTime
}

input GlobalInput {
  Currency: ENUM_GLOBAL_CURRENCY
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

"""
The `Long` scalar type represents 52-bit integers
"""
scalar Long

union Morph =
    UsersPermissionsMe
  | UsersPermissionsMeRole
  | UsersPermissionsLoginPayload
  | UserPermissionsPasswordPayload
  | Collection
  | CollectionConnection
  | CollectionAggregator
  | CollectionGroupBy
  | CollectionConnectionId
  | CollectionConnectionCreated_at
  | CollectionConnectionUpdated_at
  | CollectionConnectionTitle
  | CollectionConnectionSlug
  | CollectionConnectionPublished_at
  | createCollectionPayload
  | updateCollectionPayload
  | deleteCollectionPayload
  | Customer
  | CustomerConnection
  | CustomerAggregator
  | CustomerGroupBy
  | CustomerConnectionId
  | CustomerConnectionCreated_at
  | CustomerConnectionUpdated_at
  | CustomerConnectionFirst_name
  | CustomerConnectionLast_name
  | CustomerConnectionEmail
  | CustomerConnectionPassword
  | CustomerConnectionPublished_at
  | createCustomerPayload
  | updateCustomerPayload
  | deleteCustomerPayload
  | Global
  | updateGlobalPayload
  | deleteGlobalPayload
  | Note
  | NoteConnection
  | NoteAggregator
  | NoteGroupBy
  | NoteConnectionId
  | NoteConnectionCreated_at
  | NoteConnectionUpdated_at
  | NoteConnectionTitle
  | NoteConnectionContent
  | NoteConnectionSlug
  | NoteConnectionPublished_at
  | createNotePayload
  | updateNotePayload
  | deleteNotePayload
  | Order
  | OrderConnection
  | OrderAggregator
  | OrderGroupBy
  | OrderConnectionId
  | OrderConnectionCreated_at
  | OrderConnectionUpdated_at
  | OrderConnectionCustomer
  | OrderConnectionPublished_at
  | createOrderPayload
  | updateOrderPayload
  | deleteOrderPayload
  | Product
  | ProductConnection
  | ProductAggregator
  | ProductAggregatorSum
  | ProductAggregatorAvg
  | ProductAggregatorMin
  | ProductAggregatorMax
  | ProductGroupBy
  | ProductConnectionId
  | ProductConnectionCreated_at
  | ProductConnectionUpdated_at
  | ProductConnectionTitle
  | ProductConnectionDescription
  | ProductConnectionPrice
  | ProductConnectionSlug
  | ProductConnectionVariants
  | ProductConnectionPublished_at
  | createProductPayload
  | updateProductPayload
  | deleteProductPayload
  | QuoteItem
  | QuoteItemConnection
  | QuoteItemAggregator
  | QuoteItemAggregatorSum
  | QuoteItemAggregatorAvg
  | QuoteItemAggregatorMin
  | QuoteItemAggregatorMax
  | QuoteItemGroupBy
  | QuoteItemConnectionId
  | QuoteItemConnectionCreated_at
  | QuoteItemConnectionUpdated_at
  | QuoteItemConnectionProductId
  | QuoteItemConnectionQuantity
  | QuoteItemConnectionName
  | QuoteItemConnectionVariantId
  | QuoteItemConnectionPath
  | QuoteItemConnectionQuote
  | QuoteItemConnectionVariant
  | QuoteItemConnectionPublished_at
  | createQuoteItemPayload
  | updateQuoteItemPayload
  | deleteQuoteItemPayload
  | Quote
  | QuoteConnection
  | QuoteAggregator
  | QuoteAggregatorSum
  | QuoteAggregatorAvg
  | QuoteAggregatorMin
  | QuoteAggregatorMax
  | QuoteGroupBy
  | QuoteConnectionId
  | QuoteConnectionCreated_at
  | QuoteConnectionUpdated_at
  | QuoteConnectionCustomer
  | QuoteConnectionEmail
  | QuoteConnectionCurrency
  | QuoteConnectionTaxesIncluded
  | QuoteConnectionLineItemsSubtotalPrice
  | QuoteConnectionSubtotalPrice
  | QuoteConnectionTotalPrice
  | QuoteConnectionActive
  | createQuotePayload
  | updateQuotePayload
  | deleteQuotePayload
  | Tag
  | TagConnection
  | TagAggregator
  | TagGroupBy
  | TagConnectionId
  | TagConnectionCreated_at
  | TagConnectionUpdated_at
  | TagConnectionTitle
  | TagConnectionPublished_at
  | createTagPayload
  | updateTagPayload
  | deleteTagPayload
  | I18NLocale
  | UploadFile
  | UploadFileConnection
  | UploadFileAggregator
  | UploadFileAggregatorSum
  | UploadFileAggregatorAvg
  | UploadFileAggregatorMin
  | UploadFileAggregatorMax
  | UploadFileGroupBy
  | UploadFileConnectionId
  | UploadFileConnectionCreated_at
  | UploadFileConnectionUpdated_at
  | UploadFileConnectionName
  | UploadFileConnectionAlternativeText
  | UploadFileConnectionCaption
  | UploadFileConnectionWidth
  | UploadFileConnectionHeight
  | UploadFileConnectionFormats
  | UploadFileConnectionHash
  | UploadFileConnectionExt
  | UploadFileConnectionMime
  | UploadFileConnectionSize
  | UploadFileConnectionUrl
  | UploadFileConnectionPreviewUrl
  | UploadFileConnectionProvider
  | UploadFileConnectionProvider_metadata
  | deleteFilePayload
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsRoleConnection
  | UsersPermissionsRoleAggregator
  | UsersPermissionsRoleGroupBy
  | UsersPermissionsRoleConnectionId
  | UsersPermissionsRoleConnectionName
  | UsersPermissionsRoleConnectionDescription
  | UsersPermissionsRoleConnectionType
  | createRolePayload
  | updateRolePayload
  | deleteRolePayload
  | UsersPermissionsUser
  | UsersPermissionsUserConnection
  | UsersPermissionsUserAggregator
  | UsersPermissionsUserGroupBy
  | UsersPermissionsUserConnectionId
  | UsersPermissionsUserConnectionCreated_at
  | UsersPermissionsUserConnectionUpdated_at
  | UsersPermissionsUserConnectionUsername
  | UsersPermissionsUserConnectionEmail
  | UsersPermissionsUserConnectionProvider
  | UsersPermissionsUserConnectionConfirmed
  | UsersPermissionsUserConnectionBlocked
  | UsersPermissionsUserConnectionRole
  | createUserPayload
  | updateUserPayload
  | deleteUserPayload
  | ComponentProductConfiguration
  | ComponentProductOption
  | ComponentProductQuoteVariant
  | ComponentProductVariant

type Mutation {
  createCollection(input: createCollectionInput): createCollectionPayload
  updateCollection(input: updateCollectionInput): updateCollectionPayload
  deleteCollection(input: deleteCollectionInput): deleteCollectionPayload
  createCustomer(input: createCustomerInput): createCustomerPayload
  updateCustomer(input: updateCustomerInput): updateCustomerPayload
  deleteCustomer(input: deleteCustomerInput): deleteCustomerPayload
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  createNote(input: createNoteInput): createNotePayload
  updateNote(input: updateNoteInput): updateNotePayload
  deleteNote(input: deleteNoteInput): deleteNotePayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createQuoteItem(input: createQuoteItemInput): createQuoteItemPayload
  updateQuoteItem(input: updateQuoteItemInput): updateQuoteItemPayload
  deleteQuoteItem(input: deleteQuoteItemInput): deleteQuoteItemPayload
  createQuote(input: createQuoteInput): createQuotePayload
  updateQuote(input: updateQuoteInput): updateQuotePayload
  deleteQuote(input: deleteQuoteInput): deleteQuotePayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """
  Delete one file
  """
  deleteFile(input: deleteFileInput): deleteFilePayload

  """
  Create a new role
  """
  createRole(input: createRoleInput): createRolePayload

  """
  Update an existing role
  """
  updateRole(input: updateRoleInput): updateRolePayload

  """
  Delete an existing role
  """
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """
  Create a new user
  """
  createUser(input: createUserInput): createUserPayload

  """
  Update an existing user
  """
  updateUser(input: updateUserInput): updateUserPayload

  """
  Delete an existing user
  """
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Note {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  content: String
  slug: String
  published_at: DateTime
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type NoteAggregator {
  count: Int
  totalCount: Int
}

type NoteConnection {
  values: [Note]
  groupBy: NoteGroupBy
  aggregate: NoteAggregator
}

type NoteConnectionContent {
  key: String
  connection: NoteConnection
}

type NoteConnectionCreated_at {
  key: DateTime
  connection: NoteConnection
}

type NoteConnectionId {
  key: ID
  connection: NoteConnection
}

type NoteConnectionPublished_at {
  key: DateTime
  connection: NoteConnection
}

type NoteConnectionSlug {
  key: String
  connection: NoteConnection
}

type NoteConnectionTitle {
  key: String
  connection: NoteConnection
}

type NoteConnectionUpdated_at {
  key: DateTime
  connection: NoteConnection
}

type NoteGroupBy {
  id: [NoteConnectionId]
  created_at: [NoteConnectionCreated_at]
  updated_at: [NoteConnectionUpdated_at]
  title: [NoteConnectionTitle]
  content: [NoteConnectionContent]
  slug: [NoteConnectionSlug]
  published_at: [NoteConnectionPublished_at]
}

input NoteInput {
  title: String
  content: String
  slug: String
  tags: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Order {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  customer: Customer
  published_at: DateTime
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type OrderAggregator {
  count: Int
  totalCount: Int
}

type OrderConnection {
  values: [Order]
  groupBy: OrderGroupBy
  aggregate: OrderAggregator
}

type OrderConnectionCreated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionCustomer {
  key: ID
  connection: OrderConnection
}

type OrderConnectionId {
  key: ID
  connection: OrderConnection
}

type OrderConnectionPublished_at {
  key: DateTime
  connection: OrderConnection
}

type OrderConnectionUpdated_at {
  key: DateTime
  connection: OrderConnection
}

type OrderGroupBy {
  id: [OrderConnectionId]
  created_at: [OrderConnectionCreated_at]
  updated_at: [OrderConnectionUpdated_at]
  customer: [OrderConnectionCustomer]
  published_at: [OrderConnectionPublished_at]
}

input OrderInput {
  customer: ID
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Product {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  price: Float
  slug: String
  variants: ComponentProductConfiguration
  published_at: DateTime
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  relate_products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  collections(sort: String, limit: Int, start: Int, where: JSON): [Collection]
}

type ProductAggregator {
  count: Int
  totalCount: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorAvg {
  price: Float
}

type ProductAggregatorMax {
  price: Float
}

type ProductAggregatorMin {
  price: Float
}

type ProductAggregatorSum {
  price: Float
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductConnectionCreated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionDescription {
  key: String
  connection: ProductConnection
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnectionPrice {
  key: Float
  connection: ProductConnection
}

type ProductConnectionPublished_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionSlug {
  key: String
  connection: ProductConnection
}

type ProductConnectionTitle {
  key: String
  connection: ProductConnection
}

type ProductConnectionUpdated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionVariants {
  key: ID
  connection: ProductConnection
}

type ProductGroupBy {
  id: [ProductConnectionId]
  created_at: [ProductConnectionCreated_at]
  updated_at: [ProductConnectionUpdated_at]
  title: [ProductConnectionTitle]
  description: [ProductConnectionDescription]
  price: [ProductConnectionPrice]
  slug: [ProductConnectionSlug]
  variants: [ProductConnectionVariants]
  published_at: [ProductConnectionPublished_at]
}

input ProductInput {
  title: String
  description: String
  images: [ID]
  relate_products: [ID]
  price: Float
  slug: String
  variants: ComponentProductConfigurationInput
  collections: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  collection(id: ID!, publicationState: PublicationState): Collection
  collections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Collection]
  collectionsConnection(sort: String, limit: Int, start: Int, where: JSON): CollectionConnection
  customer(id: ID!, publicationState: PublicationState): Customer
  customers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Customer]
  customersConnection(sort: String, limit: Int, start: Int, where: JSON): CustomerConnection
  global(publicationState: PublicationState): Global
  note(id: ID!, publicationState: PublicationState): Note
  notes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Note]
  notesConnection(sort: String, limit: Int, start: Int, where: JSON): NoteConnection
  order(id: ID!, publicationState: PublicationState): Order
  orders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Order]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrderConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  quoteItem(id: ID!, publicationState: PublicationState): QuoteItem
  quoteItems(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [QuoteItem]
  quoteItemsConnection(sort: String, limit: Int, start: Int, where: JSON): QuoteItemConnection
  quote(id: ID!, publicationState: PublicationState): Quote
  quotes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Quote]
  quotesConnection(sort: String, limit: Int, start: Int, where: JSON): QuoteConnection
  tag(id: ID!, publicationState: PublicationState): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Quote {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  customer: Customer
  email: String
  currency: JSON
  taxesIncluded: Boolean
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
  active: Boolean
  lineItems(sort: String, limit: Int, start: Int, where: JSON): [QuoteItem]
}

type QuoteAggregator {
  count: Int
  totalCount: Int
  sum: QuoteAggregatorSum
  avg: QuoteAggregatorAvg
  min: QuoteAggregatorMin
  max: QuoteAggregatorMax
}

type QuoteAggregatorAvg {
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
}

type QuoteAggregatorMax {
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
}

type QuoteAggregatorMin {
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
}

type QuoteAggregatorSum {
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
}

type QuoteConnection {
  values: [Quote]
  groupBy: QuoteGroupBy
  aggregate: QuoteAggregator
}

type QuoteConnectionActive {
  key: Boolean
  connection: QuoteConnection
}

type QuoteConnectionCreated_at {
  key: DateTime
  connection: QuoteConnection
}

type QuoteConnectionCurrency {
  key: JSON
  connection: QuoteConnection
}

type QuoteConnectionCustomer {
  key: ID
  connection: QuoteConnection
}

type QuoteConnectionEmail {
  key: String
  connection: QuoteConnection
}

type QuoteConnectionId {
  key: ID
  connection: QuoteConnection
}

type QuoteConnectionLineItemsSubtotalPrice {
  key: Float
  connection: QuoteConnection
}

type QuoteConnectionSubtotalPrice {
  key: Float
  connection: QuoteConnection
}

type QuoteConnectionTaxesIncluded {
  key: Boolean
  connection: QuoteConnection
}

type QuoteConnectionTotalPrice {
  key: Float
  connection: QuoteConnection
}

type QuoteConnectionUpdated_at {
  key: DateTime
  connection: QuoteConnection
}

type QuoteGroupBy {
  id: [QuoteConnectionId]
  created_at: [QuoteConnectionCreated_at]
  updated_at: [QuoteConnectionUpdated_at]
  customer: [QuoteConnectionCustomer]
  email: [QuoteConnectionEmail]
  currency: [QuoteConnectionCurrency]
  taxesIncluded: [QuoteConnectionTaxesIncluded]
  lineItemsSubtotalPrice: [QuoteConnectionLineItemsSubtotalPrice]
  subtotalPrice: [QuoteConnectionSubtotalPrice]
  totalPrice: [QuoteConnectionTotalPrice]
  active: [QuoteConnectionActive]
}

input QuoteInput {
  customer: ID
  lineItems: [ID]
  email: String
  currency: JSON
  taxesIncluded: Boolean
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
  active: Boolean
  created_by: ID
  updated_by: ID
}

type QuoteItem {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  productId: Product
  quantity: Int
  name: String
  variantId: Int
  path: String
  quote: Quote
  variant: ComponentProductQuoteVariant
  published_at: DateTime
}

type QuoteItemAggregator {
  count: Int
  totalCount: Int
  sum: QuoteItemAggregatorSum
  avg: QuoteItemAggregatorAvg
  min: QuoteItemAggregatorMin
  max: QuoteItemAggregatorMax
}

type QuoteItemAggregatorAvg {
  quantity: Float
  variantId: Float
}

type QuoteItemAggregatorMax {
  quantity: Float
  variantId: Float
}

type QuoteItemAggregatorMin {
  quantity: Float
  variantId: Float
}

type QuoteItemAggregatorSum {
  quantity: Float
  variantId: Float
}

type QuoteItemConnection {
  values: [QuoteItem]
  groupBy: QuoteItemGroupBy
  aggregate: QuoteItemAggregator
}

type QuoteItemConnectionCreated_at {
  key: DateTime
  connection: QuoteItemConnection
}

type QuoteItemConnectionId {
  key: ID
  connection: QuoteItemConnection
}

type QuoteItemConnectionName {
  key: String
  connection: QuoteItemConnection
}

type QuoteItemConnectionPath {
  key: String
  connection: QuoteItemConnection
}

type QuoteItemConnectionProductId {
  key: ID
  connection: QuoteItemConnection
}

type QuoteItemConnectionPublished_at {
  key: DateTime
  connection: QuoteItemConnection
}

type QuoteItemConnectionQuantity {
  key: Int
  connection: QuoteItemConnection
}

type QuoteItemConnectionQuote {
  key: ID
  connection: QuoteItemConnection
}

type QuoteItemConnectionUpdated_at {
  key: DateTime
  connection: QuoteItemConnection
}

type QuoteItemConnectionVariant {
  key: ID
  connection: QuoteItemConnection
}

type QuoteItemConnectionVariantId {
  key: Int
  connection: QuoteItemConnection
}

type QuoteItemGroupBy {
  id: [QuoteItemConnectionId]
  created_at: [QuoteItemConnectionCreated_at]
  updated_at: [QuoteItemConnectionUpdated_at]
  productId: [QuoteItemConnectionProductId]
  quantity: [QuoteItemConnectionQuantity]
  name: [QuoteItemConnectionName]
  variantId: [QuoteItemConnectionVariantId]
  path: [QuoteItemConnectionPath]
  quote: [QuoteItemConnectionQuote]
  variant: [QuoteItemConnectionVariant]
  published_at: [QuoteItemConnectionPublished_at]
}

input QuoteItemInput {
  productId: ID
  quantity: Int
  name: String
  variantId: Int
  path: String
  quote: ID
  variant: ComponentProductQuoteVariantInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  published_at: DateTime
  notes(sort: String, limit: Int, start: Int, where: JSON): [Note]
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionPublished_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionTitle {
  key: String
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  title: [TagConnectionTitle]
  published_at: [TagConnectionPublished_at]
}

input TagInput {
  title: String
  notes: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

"""
A time string with format: HH:mm:ss.SSS
"""
scalar Time

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

input createCollectionInput {
  data: CollectionInput
}

type createCollectionPayload {
  collection: Collection
}

input createCustomerInput {
  data: CustomerInput
}

type createCustomerPayload {
  customer: Customer
}

input createNoteInput {
  data: NoteInput
}

type createNotePayload {
  note: Note
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createQuoteInput {
  data: QuoteInput
}

input createQuoteItemInput {
  data: QuoteItemInput
}

type createQuoteItemPayload {
  quoteItem: QuoteItem
}

type createQuotePayload {
  quote: Quote
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input deleteCollectionInput {
  where: InputID
}

type deleteCollectionPayload {
  collection: Collection
}

input deleteCustomerInput {
  where: InputID
}

type deleteCustomerPayload {
  customer: Customer
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type deleteGlobalPayload {
  global: Global
}

input deleteNoteInput {
  where: InputID
}

type deleteNotePayload {
  note: Note
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deleteQuoteInput {
  where: InputID
}

input deleteQuoteItemInput {
  where: InputID
}

type deleteQuoteItemPayload {
  quoteItem: QuoteItem
}

type deleteQuotePayload {
  quote: Quote
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCollectionInput {
  title: String
  products: [ID]
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editComponentProductConfigurationInput {
  id: ID
  option: [editComponentProductOptionInput]
}

input editComponentProductOptionInput {
  id: ID
  label: String
  variant: [editComponentProductVariantInput]
}

input editComponentProductQuoteVariantInput {
  id: ID
  sku: String
  name: String
  image: ID
  requiresShipping: Boolean
  price: Float
  listPrice: Float
}

input editComponentProductVariantInput {
  id: ID
  title: String
  price: Float
  swatch_image: ID
}

input editCustomerInput {
  first_name: String
  last_name: String
  email: String
  password: String
  orders: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editGlobalInput {
  Currency: ENUM_GLOBAL_CURRENCY
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editNoteInput {
  title: String
  content: String
  slug: String
  tags: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOrderInput {
  customer: ID
  products: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title: String
  description: String
  images: [ID]
  relate_products: [ID]
  price: Float
  slug: String
  variants: editComponentProductConfigurationInput
  collections: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editQuoteInput {
  customer: ID
  lineItems: [ID]
  email: String
  currency: JSON
  taxesIncluded: Boolean
  lineItemsSubtotalPrice: Float
  subtotalPrice: Float
  totalPrice: Float
  active: Boolean
  created_by: ID
  updated_by: ID
}

input editQuoteItemInput {
  productId: ID
  quantity: Int
  name: String
  variantId: Int
  path: String
  quote: ID
  variant: editComponentProductQuoteVariantInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editTagInput {
  title: String
  notes: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input updateCollectionInput {
  where: InputID
  data: editCollectionInput
}

type updateCollectionPayload {
  collection: Collection
}

input updateCustomerInput {
  where: InputID
  data: editCustomerInput
}

type updateCustomerPayload {
  customer: Customer
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

input updateNoteInput {
  where: InputID
  data: editNoteInput
}

type updateNotePayload {
  note: Note
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Order
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input updateQuoteInput {
  where: InputID
  data: editQuoteInput
}

input updateQuoteItemInput {
  where: InputID
  data: editQuoteItemInput
}

type updateQuoteItemPayload {
  quoteItem: QuoteItem
}

type updateQuotePayload {
  quote: Quote
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}
